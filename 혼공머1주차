## <02-1> 훈련 세트와 테스트 세트

### 지도 학습과 비지도 학습

- 머신러닝 알고리즘 → 지도학습(supervised learning), 비지도학습(unsupervised learning)

(강화학습도 있지만 챕터2 에선 다루지 않음)

지도 학습

- 입력(데이터)과 타깃(정답)으로 이뤄진 훈련 데이터(training data)가 필요
- 입력(input) 으로는 대상의 특성(feature) 을 사용
- 지도 학습 알고리즘은 정답(타깃) 이 있고, 이 정답을 맞히는 것을 학습

비지도 학습

- 비지도 학습 알고리즘은 정답(타깃) 없이 입력 데이터만 사용함

### 훈련 세트, 테스트 세트

If. 시험 전에 출제될 시험 문제와 정답을 다 알려주고 시험을 본다면?

→ 문제와 정답을 외워서 100점 가능, 머신러닝도 이와 마찬가지

데이터와 타깃을 미리 주고 학습시킨 후, 같은 데이터로 평가한다면 모두 맞춤

그렇다면? 머신러닝 알고리즘의 성능을 제대로 평가하려면 훈련/평가 데이터가 각각 달라야 함

 How? → 1) 평가를 위한 다른 데이터를 준비, 2) 이미 준비된 데이터의 일부를 활용(이걸 많이 씀)

- 평가에 사용하는 데이터 == 테스트 세트(test set)
- 훈련에 사용되는 데이터 == 훈련 세트(train set)

```python
from sklearn.neighbors import KNeighborsClassifier

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

#두 파이썬 리스트를 순회하면서, 각 생선의 길이와 무게를 하나의 리스트로 담은 2차원 리스트
#하나의 생선 데이터 -> 샘플(sample)
#
fish_data = [[l, w] for l, w in zip(fish_length, fish_weight)]
fish_target = [1]*35 + [0]*14

#클래스 import 해서 모델 객체 생성
kn = KNeighborsClassifier()

train_input = fish_data[:35] #훈련 세트 input으로 인덱스 0~34 까지
train_target = fish_target[:35] #훈련 세트 target으로 인덱스 0~34 까지

test_input = fish_data[35:] #테스트 세트 input으로 인덱스 35~마지막 까지
test_target = fish_target[35:] #훈련 세트 input으로 인덱스 035~마지막 까지

kn = kn.fit(train_input, train_target)
kn.score(test_input, test_target)

output -> 0.0
```

위의 코드의 결과로 정확도 0.0 이 나옴 → 망함

### 샘플링 편향

정확도가 0, 뭐가 문제일까? 

→ 훈련 세트와 테스트 세트에 샘플이 골고루 섞여 있지 않으면 이런 일이 발생, 샘플링이 한 쪽으로 치우졌다는 의미로 샘플링 편향(sampling bias) 라고 함

### 넘파이

- 파이썬을 대표 배열 라이브러리

```python
from sklearn.neighbors import KNeighborsClassifier
import numpy as np
import matplotlib.pyplot as plt

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0,
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0,
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8,
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0,
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0,
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7,
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

input_arr = np.array(fish_data)
target_arr = np.array(fish_target)

#인덱스 랜덤으로 생성해서 섞기, 데이터 샘플을 섞어주는 과
np.random.seed(42)
index = np.arange(49)
np.random.shuffle(index)

train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]

test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]

plt.scatter(train_input[:,0], train_input[:,1])
plt.scatter(test_input[:,0], test_input[:,1])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

kn.fit(train_input, train_target)
kn.score(test_input, test_target) # 정확도 1.0

kn.predict(test_input)
test_target #예측값과 정답도 일치

## <02-2> 데이터 전처리

위의 코드로 정확도 100% 인걸 확인했는데, 막상 도미의 특성을 input 으로 주니 빙어라고 예측을 하는 문제가 발견됨 (책에서…)

```python
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0,
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0,
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8,
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0,
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0,
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7,
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]
                
np.column_stack(([1,2,3], [4,5,6]))
fish_target = np.concatenate((np.ones(35), np.zeros(14)))

#사이킷런으로 훈련 셋, 테스트 셋 나눔
train_input, test_input, train_target, test_target = train_test_split(
    fish_data, fish_target, random_state=42)
    
train_input, test_input, train_target, test_target = train_test_split(
    fish_data, fish_target, stratify=fish_target, random_state=42)
    
#수상한 도미 한 마리
kn = KNeighborsClassifier()
kn.fit(train_input, train_target)
kn.score(test_input, test_target) # 결과 : 1.0
->결과가 1.0 으로 나옴, 테스트 세트의 도미와 빙어를 모두 올바르게 분류함

print(kn.predict([[25, 150]]))
->근데, 이게 도미 데이터 인데 결과가 0. 이 나옴. 즉 지금 머신이 도미를 도미로 분류 못하고 있음

결과가 이상한 도미 데이터(25, 150)를 기준으로 산점도 상에서도 이 샘플은 오른쪽 위로 뻗어있는 다른 도미 데이터들에 더 가까움
근데 왜? 계속 빙어라고 판단하고 있을까?

## 기준 맞추기
→ 산점도에서 이상한 도미와 가까운 도미 데이터가 5개 중에 1개밖에 없음.
근데? 막상 거리를 재보면 
- 이상한 도미 ↔ 가장 가까운 도미 샘플 : 92
- 이상한 도미 ↔ 가장 가까운 방어 샘풀 : 132
분명 방어랑 이상한 도미가 그래프 상으로 훨씬 먼데 수치차이가 크지 않음

→ x 축과 y 축의 한 칸 당 증가량이 다르기 때문에 이런 일이 발생. 즉, 두 특성의 스케일(scale) 이 다르다. 이런 알고리즘들은 샘플 간의 거리에 영향을 많이 받으므로 특성값을 일정한 기준으로 맞춰야함
→ 데이터 전처리(data preprocessing)

## 표준 점수(Standard Score, z-score) 이용 방법

각 데이터 값에서 평균을 빼고, 표준편차로 나누는 방식
우리는 표준점수(standard score) 를 이용해서 전처리를 하겠습니다.

이 상태로 다시 훈련해보면? → 정확도 : 1.0, 이상한 도미 데이터도 1(도미) 로 드디어 예측성공함.

위의 산점도 그래프에서 이상한 도미 데이터와 가장 가까운 샘플 5개를 초록색으로 표시해본 결과

드디어 가장 가까은 샘플 5개가 모두 도미 데이터로 나옴.
